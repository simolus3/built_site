# This file tells Dart's build system which builders we're providing. It's
# quite powerful, see https://pub.dev/packages/build_config

# We have a fairly complex build setup to get around the restriction that
# regular builders can only emit a fixed amount of files relative to their
# primary input. A common workaround is to chunk files up into an archive and
# later extract that through a post-process builder. We do that for static
# content contributed by themes, but we should avoid it in general to enable
# fast and incremental rebuilds. In general, we prefer to have many small build
# steps.
#
# Themes and the website itself can declare static content in static/. We need
# to copy that to web/, which is the directory served and built. For this
# purpose, we're creating a tar file of all the static content crawled from
# this package and its themes. This is fairly expensive, and we only want to do
# that when themes really changed. So, we have a three-step build setup just
# for this:
#
#  1a. The extract_themes builder extracts themes from the website.yaml config
#      file.
#  1b. The local_theme_indexer builder globs relevant file from every package.
#      This is an extra builder because builders can only glob in the package
#      on which they operate.
#  2.  The index_themes builder takes the output from 1. as input and emits a
#      tar file of static content crawled across themes. It also creates a
#      unified file of all i18n keys.
#  3.  The copy_static post_process builder extracts the tar file into the web/
#      directory of the root package.
#
# Having a pipeline for steps 1 and 2 ensures that not every single edit to
# website.yaml leads to a full rebuild.
#
# Building individual pages is a multi-stage pipeline too, which enables faster
# incremental rebuilds.
#  1. The metadata builder extracts the front matter from a page file. Other
#     builders will only read the generated metadata, which avoids unecessarily
#     broad rebuilds when changing a page's content.
#  2. The default built_site builder will apply the desired template to turn
#     the input into an output file.
#  3. Finally, the copy_to_web post process builder copies the generated pages
#     to web/
#
# Note that every builder writes to cache, users don't want to see generated
# pages in their source files.
builders:
  # This builder only extracts the "themes" key from a built_site configuration
  # file. We need to do expensive (typically >= 1s) indexing work when themes
  # change, which we want to avoid for harmless edits to website.yaml.
  extract_themes:
    auto_apply: root_package
    # We're generating to lib/ because assets in lib/ are part of the default
    # target. Otherwise users would have to add the output to their target's
    # sources, which gets annoying.
    build_extensions: {"website.yaml": ["lib/built_site_themes.json"]}
    build_to: cache
    import: "package:built_site/builders.dart"
    builder_factories: ["extractThemes"]
    runs_before: ["|index_themes"]

  # Finds static resources contributed by a single theme package. Basically,
  # outputs the result of running `findAssets(Glob('{static/**,i18n/**}'))` in
  # the theme's package.
  local_theme_indexer:
    auto_apply: dependents
    # Again, generating to lib/ to avoid the output not being part of the target
    build_extensions: {"theme.yaml": ["lib/built_site_theme.json"]}
    build_to: cache
    import: "package:built_site/builders.dart"
    builder_factories: ["localThemeIndex"]
    runs_before: ['|index_themes']

  # Collects all resources found by local_theme_indexer into a single tar file
  # for resources and into a single json for translation keys.
  index_themes:
    auto_apply: root_package
    build_to: cache
    import: "package:built_site/builders.dart"
    builder_factories: ["indexThemes"]
    runs_before: ["|metadata"]
    build_extensions:
      "lib/built_site_themes.json":
        - "lib/static_content.tar"
        - "lib/i18n_merged.json"
        - "web/main.scss"
        - "web/main.dart"
    applies_builders: ["|extract_static"]

  # Metadata extractor to build indices and overviews
  metadata:
    auto_apply: dependents
    build_extensions:
      '.md': ['.page_meta']
      '.html': ['.page_meta']
    build_to: cache
    import: "package:built_site/builders.dart"
    builder_factories: ["metadata"]
    runs_before: ["|built_site", "|indexer"]
    defaults:
      generate_for:
        - "pages/**"

  # Lazily creates an index of all pages when needed
  indexer:
    auto_apply: root_package
    build_extensions: {'$package$': ['lib/site_index.json']}
    build_to: cache
    import: "package:built_site/builders.dart"
    builder_factories: ["index"]
    runs_before: ["|built_site"]
    is_optional: true

  # Lazily create a hash of assets when needed. This is used for the "asset"
  # filter.
  hash:
    auto_apply: dependents
    build_extensions: {'': ['.built_site_hash']}
    build_to: cache
    import: 'package:built_site/builders.dart'
    builder_factories: ["hash"]
    runs_before: ["|built_site"]
    is_optional: true

  # The default builder, generating a static website and its final paths.
  built_site:
    auto_apply: dependents
    builder_factories: ["generator"]
    build_extensions: {'.page_meta': ['.generated_page']}
    import: "package:built_site/builders.dart"
    applies_builders: ['|copy_to_web', 'sass_builder']
    defaults:
      dev_options:
        environment: "dev"
      release_options:
        environment: "prod"

post_process_builders:
  # Regular builders must output files relative to their primary input, which
  # is usually in pages/ for us. Copy those to web/
  copy_to_web:
    builder_factory: 'postProcess'
    import: "package:built_site/builders.dart"
    input_extensions: [".generated_page"]

  # Extracts static resources contributed by themes into web/
  extract_static:
    builder_factory: "extractStatic"
    import: "package:built_site/builders.dart"
    input_extensions: ["static_content.tar"]

targets:
  $default:
    auto_apply_builders: false
    sources:
      - "templates/**"
      - "lib/**"
      - "lib/$lib$"

additional_public_assets:
  - "templates/**"
